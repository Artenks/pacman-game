using UnityEngine;

public abstract class Vulnerabilitys : GhostMachineState
{

    protected float VulnerabilityEndingTime;
    protected float VulnerabilityTimer;

    protected bool TimerEnd;

    protected bool _isVulnerable;
    protected bool _dead;


    public Vulnerabilitys(GhostMove ghostMove, GhostAI ghostAI, Transform pacman, (float total, float ending) duration)
        : base(ghostMove, ghostAI, pacman)
    {
        VulnerabilityEndingTime += duration.ending;
        VulnerabilityTimer += duration.total;

        SetVulnerability += ((float, float) duration) =>
        {
            _isVulnerable = true;

            var state = new Vulnerable(GhostMove, ghostAI, pacman, duration);
            NextState = state;
            Event = Event.Exit;
        };
    }

    protected override void Detect()
    {

        if (!Collided.isCollided)
            return;

        if (Collided.obj.CompareTag("Player"))
        {
            _dead = true;
        }

        base.Detect();
    }

    protected override void Enter()
    {
        base.Enter();
    }
    protected override void Update()
    {
        if (_dead)
        {
            GhostAI.OnGhoustCaught?.Invoke(GhostAI);
            NextState = new Defeated(GhostMove, GhostAI, Pacman);
            Event = Event.Exit;
            return;
        }

        if (_isVulnerable)
            return;

        GhostMove.SetTargetMoveLocation((GhostMove.transform.position - Pacman.position * 2));

        VulnerabilityTimer -= Time.deltaTime;

        Debug.Log($"{VulnerabilityTimer} : {VulnerabilityEndingTime}");

        TimerEnd = (VulnerabilityTimer <= VulnerabilityEndingTime);

        base.Update();
    }
    protected override void Exit()
    {
        base.Exit();
    }
}
